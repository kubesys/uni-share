// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: vcuda.proto

package vcuda

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VCUDAService_RegisterVDevice_FullMethodName = "/vcuda.VCUDAService/RegisterVDevice"
)

// VCUDAServiceClient is the client API for VCUDAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VCUDAServiceClient interface {
	RegisterVDevice(ctx context.Context, in *VDeviceRequest, opts ...grpc.CallOption) (*VDeviceResponse, error)
}

type vCUDAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVCUDAServiceClient(cc grpc.ClientConnInterface) VCUDAServiceClient {
	return &vCUDAServiceClient{cc}
}

func (c *vCUDAServiceClient) RegisterVDevice(ctx context.Context, in *VDeviceRequest, opts ...grpc.CallOption) (*VDeviceResponse, error) {
	out := new(VDeviceResponse)
	err := c.cc.Invoke(ctx, VCUDAService_RegisterVDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VCUDAServiceServer is the server API for VCUDAService service.
// All implementations must embed UnimplementedVCUDAServiceServer
// for forward compatibility
type VCUDAServiceServer interface {
	RegisterVDevice(context.Context, *VDeviceRequest) (*VDeviceResponse, error)
	mustEmbedUnimplementedVCUDAServiceServer()
}

// UnimplementedVCUDAServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVCUDAServiceServer struct {
}

func (UnimplementedVCUDAServiceServer) RegisterVDevice(context.Context, *VDeviceRequest) (*VDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVDevice not implemented")
}
func (UnimplementedVCUDAServiceServer) mustEmbedUnimplementedVCUDAServiceServer() {}

// UnsafeVCUDAServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VCUDAServiceServer will
// result in compilation errors.
type UnsafeVCUDAServiceServer interface {
	mustEmbedUnimplementedVCUDAServiceServer()
}

func RegisterVCUDAServiceServer(s grpc.ServiceRegistrar, srv VCUDAServiceServer) {
	s.RegisterService(&VCUDAService_ServiceDesc, srv)
}

func _VCUDAService_RegisterVDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCUDAServiceServer).RegisterVDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VCUDAService_RegisterVDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCUDAServiceServer).RegisterVDevice(ctx, req.(*VDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VCUDAService_ServiceDesc is the grpc.ServiceDesc for VCUDAService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VCUDAService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vcuda.VCUDAService",
	HandlerType: (*VCUDAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterVDevice",
			Handler:    _VCUDAService_RegisterVDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vcuda.proto",
}
